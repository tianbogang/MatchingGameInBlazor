@page "/playgame"
@page "/playgame/{Difficulty:int}"

@inject IGameService service
@inject NavigationManager NavigationManager

@implements IDisposable

<div class="container">

    <div class="d-flex justify-content-around">
        <span class="@PlayingClass" style="line-height:38px"></span>
        <h3>Play Game</h3>
        <StopWatch @ref="stopWatch" />
    </div>

    @if (game?.CardSet1 == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="d-flex flex-wrap card-set">
            @foreach (var card in game.CardSet1)
            {
                @switch (card.State)
                {
                    case CardState.Closed:
                        <button class="btn card card-closed" @onclick="() => OnClickCard1(card)"></button>
                        break;

                    case CardState.OpenGreen:
                        <div class="btn card card-green">@card.Point</div>
                        break;

                    case CardState.OpenRed:
                        <div class="btn card card-red">@card.Point</div>
                        break;

                    case CardState.Hidden:
                        <div class="card card-hidden"></div>
                        break;
                }
            }
        </div>
    }

    <p />

    @if (game?.CardSet2 == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="d-flex flex-wrap card-set">
            @foreach (var card in game.CardSet2)
            {
                @switch (card.State)
                {
                    case CardState.Closed:
                        <button class="btn card card-closed" @onclick="() => OnClickCard2(card)"></button>
                        break;

                    case CardState.OpenGreen:
                        <div class="btn card card-green">@card.Point</div>
                        break;

                    case CardState.OpenRed:
                        <div class="btn card card-red">@card.Point</div>
                        break;

                    case CardState.Hidden:
                        <div class="card card-hidden"></div>
                        break;
                }
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public int Difficulty { get; set; } = (int)GameDifficulty.Medium;

    private StopWatch stopWatch;

    private Game game;

    public string PlayingClass => ( game.MatchedCards ? "oi oi-thumb-up text-success" : ( game.AnyRedCard ? "oi oi-thumb-down" : "oi oi-person text-success" ) );

    protected override async Task OnInitializedAsync()
    {
        game = service.CurrentGame;
        game.CardStateChanged += OnCardStateChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            stopWatch.Start();
        }
    }

    private void OnCardStateChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async void OnClickCard1(Card clickedCard)
    {
        await game.UpdateCardFromUno(clickedCard.Point);
        CheckAndStop();
    }

    private async void OnClickCard2(Card clickedCard)
    {
        await game.UpdateCardFromDue(clickedCard.Point);
        CheckAndStop();
    }

    private void CheckAndStop()
    {
        var t = new System.Timers.Timer(1000);
        t.Elapsed += (sender, args) =>
        {
            if(game.RemainCards == 0)
            {
                stopWatch.Stop();
                game.TimeUsed = stopWatch.TimeElapsed;
                NavigationManager.NavigateTo($"gameover");
            }
        };
        t.AutoReset = false;
        t.Start();
    }

    public void Dispose()
    {
        if(game != null)
            game.CardStateChanged -= OnCardStateChanged;

        stopWatch?.Stop();
    }
}
